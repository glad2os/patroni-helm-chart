apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: patroni
  namespace: test
spec:
  selector:
    matchLabels:
      app: patroni
  serviceName: "patroni"
  replicas: 1
  template:
    metadata:
      labels:
        app: patroni
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/production
                    operator: Exists
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: "Always"
      initContainers:
      - name: init-data-dir
        image: busybox
        command: ["sh", "-c", "mkdir -p /home/venv/data/pg_data && chmod -R 700 /home/venv/data/postgresql0 && chmod -R 700 /home/venv/data/pg_data && chown -R 1001:1001 /home/venv/data"]
        volumeMounts:
        - name: postgres-data
          mountPath: /home/venv/data
        securityContext:
          runAsUser: 0
      containers:
      - name: patroni
        imagePullPolicy: Always
        image: harbor.softlogic.ai/library/patroni:latest
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /home/venv/data
        - name: raft-data
          mountPath: /home/venv/raft
        - name: patroni-config
          mountPath: /home/venv/config.yml
          subPath: config.yml
        command: ["/home/venv/bin/patroni", "/home/venv/config.yml"]
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
      volumes:
      - name: patroni-config
        configMap:
          name: patroni-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "longhorn-default"
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: raft-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "longhorn-default"
      resources:
        requests:
          storage: 1Gi